// В ES6 декоратор - это функция, которая принимает
// текущий объект, его имя свойства и дескрпитор (объект) который
// конфигурирует свойство
function readonly(target, key, descriptor){
	descriptor.writable = false;
	return descriptor;
}

class Chocolate {

	constructor(name, price) {
		this.name = name;
		this.price = price;
	}

	// чтобы бекорировать класс - нужно вызвать декоратор
	// по имени с собачкой в начале
	@readonly
	// после декорирования методу выставится флаг
	// writable = false
	// что запретит его дальнейшее переопределение
	getStick() {
		console.log(`name: ${this.name}\nprice: ${this.price}`)
	}

}

// в более общем смысле, декоратор - это функция, котора меняет
// поведение другой функции
// В нотации ES5 он представляет собой функцию, которая возвращает
// новую функцию с учетом нового поведения при помощи конструкции
// fn.apply(this, arguments)
// Однако, поведение при котором работа ведется со свойствами объекта
// и их конфигурированием так же доступна в ES5 потому как у нас есть
// метод Object.defineProperty()